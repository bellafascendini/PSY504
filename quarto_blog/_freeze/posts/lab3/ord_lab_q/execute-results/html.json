{
  "hash": "7eb1b05685c52a7f5620528c712e2b84",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Ordinal Regression Lab Answers\"\noutput: \n  tufte::tufte_html:\n    css: \n    tufte_variant: \"envisioned\"\n    highlight: github-dark\n    fig_height: 10\n    fig_width: 16\n    toc: true\n    toc_depth: 1\nexecute: \n  message: false\n  warning: false\nformat: \n  html:\n    code-fold: true\n    code-overflow: wrap\nengine: knitr\n---\n\n\n\n# Lab 3- Ordinal Regression\n\n## Instructions\n\n-   If you are fitting a model, display the model output in a neatly formatted table. (The `tidy` and `kable` functions can help!)\n\n-   If you are creating a plot, use clear labels for all axes, titles, etc.\n\n-   If you are using Github, don't forget to commit and push your work to to it regularly, at least after each exercise. Write short and informative commit messages.\n    Else, if you are submitting on Canvas, make sure that the version you submit is the latest, and that it runs/knits without any errors. \n\n-   When you're done, we should be able to knit the final version of the QMD in your GitHub as a HTML.\n\n# Lab\n\nThe data for this week's lab is taken from the Great British Bake-off (GBBO, https://bakeoff.netlify.app/). In this lab you will be looking at `Gender` and `Age` as a predictor of technical rank. For this exercise, we will only be looking at those who were in top 3 of technical.\n\nIn the GBBO, the bakers are usually provided with a list of ingredients and basic instructions, but they may not have access to specific measurements or details on how to prepare the ingredients. The judges evaluate the bakers' finished products based on factors such as appearance, texture, and flavor, but also compare the bakers' results to a standard version of the recipe that has been prepared in advance by the judges or a baking expert.\n\nThe dataset contains 3 variables:\n\n-   `Gender`: M = MALE, F = FEMALE\n\n-   `Age`: Age of baker\n\n-   `Technical Rank`: Rank in technical (1,2,3)\n\n## Load packages:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\nlibrary(broom)\nlibrary(performance)\nlibrary(ordinal) #clm\nlibrary(car) # anova\nlibrary(ggeffects) #  viz\nlibrary(gofcat) # brant\nlibrary(brms)\nlibrary(emmeans) # contrasts\nlibrary(knitr)\n```\n:::\n\n\n\n## Load data\n\n-   Make sure only the top 3 ranks are being used. *For some reason, there are missing ranks (my guess is they did not announce rank on TV)*\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ngbbo <- read_csv(\"https://raw.githubusercontent.com/suyoghc/PSY-504_Spring-2025/refs/heads/main/Ordinal%20Regression/data/GBBO.csv\")\n\n# Enter code to filter. Think about the data type that would be relevant for Rank\ngb <- gbbo %>% \n  filter(!is.na(`Technical Rank`) & `Technical Rank` %in% c(1, 2, 3))\n```\n:::\n\n\n\n## Explore\n\n-   Plot two figures showing the percentage of bakers in each rank--- create one for `Gender` and `Age`\n\n\n\n    ::: {.cell}\n    \n    ```{.r .cell-code}\n    #plot percentage of bakers in each rank by gender\n    gender_rank <- gb %>%\n      group_by(Gender, `Technical Rank`) %>%\n      summarise(n = n(), .groups = 'drop') %>%\n      mutate(perc = n / sum(n) * 100)\n    \n    ggplot(gender_rank, aes(x = factor(`Technical Rank`), y = perc, fill = Gender)) +\n      geom_bar(stat = \"identity\", position = position_dodge(width = 0.8)) +\n      labs(title = \"Percentage of Bakers in Each Technical Rank by Gender\",\n       x = \"Technical Rank\",\n       y = \"Percentage\") +\n      theme_minimal()\n    ```\n    \n    ::: {.cell-output-display}\n    ![](ord_lab_q_files/figure-html/unnamed-chunk-3-1.png){width=672}\n    :::\n    :::\n\n::: {.cell}\n\n```{.r .cell-code}\n #plot percentage of bakers in each rank by age group\ngb <- gb %>% \n  mutate(AgeGroup = cut(Age, \n                        breaks = seq(floor(min(Age, na.rm = TRUE)), ceiling(max(Age, na.rm = TRUE)), by = 10),\n                        include.lowest = TRUE, right = FALSE))\n\nage_rank <- gb %>%\n  group_by(AgeGroup, `Technical Rank`) %>%\n  summarise(n = n(), .groups = 'drop') %>%\n  mutate(perc = n / sum(n) * 100)\n\nggplot(age_rank, aes(x = AgeGroup, y = perc, fill = factor(`Technical Rank`))) +\n  geom_bar(stat = \"identity\", position = position_dodge(width = 0.8)) +\n  labs(title = \"Percentage of Bakers in Each Technical Rank by Age Group\",\n       x = \"Age Group\",\n       y = \"Percentage\",\n       fill = \"Technical Rank\") +\n  theme_minimal() +\n  theme(axis.text.x = element_text(angle = 45, hjust = 1))\n```\n\n::: {.cell-output-display}\n![](ord_lab_q_files/figure-html/unnamed-chunk-4-1.png){width=672}\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n#here's a plot without grouping age into bins, which is less informative visually so I prefer the above plot\nage_rank_cont <- gb %>%\n  group_by(Age, `Technical Rank`) %>%\n  summarise(n = n(), .groups = 'drop') %>%\n  \n  group_by(Age) %>%\n  mutate(perc = n / sum(n) * 100) %>%\n  ungroup()\n\nggplot(age_rank_cont, aes(x = factor(Age), y = perc, fill = factor(`Technical Rank`))) +\n  geom_bar(stat = \"identity\", position = position_dodge(width = 0.8)) +\n  labs(title = \"Percentage of Bakers in Each Technical Rank by Age\",\n       x = \"Age\",\n       y = \"Percentage\",\n       fill = \"Technical Rank\") +\n  theme_minimal() +\n  theme(axis.text.x = element_text(angle = 45, hjust = 1))\n```\n\n::: {.cell-output-display}\n![](ord_lab_q_files/figure-html/unnamed-chunk-5-1.png){width=672}\n:::\n:::\n\n\n\n\n## Ordinal Analysis\n\n-   If you haven't already, convert the outcome variable to an ordered factor. What does the order here represent?\n\n\n\n    ::: {.cell}\n    \n    ```{.r .cell-code}\n    #The order now represents the ranking from best (1) to worst (3) among the top three.\n    gb <- gb %>%\n      mutate(`Technical Rank` = factor(`Technical Rank`, levels = c(1, 2, 3), ordered = TRUE))\n    ```\n    :::\n\n\n\n-   Convert input variables to categorical factors as appropriate.\n\n\n\n    ::: {.cell}\n    \n    ```{.r .cell-code}\n    gb <- gb %>%\n      mutate(Gender = factor(Gender, levels = c(\"M\", \"F\")))\n    ```\n    :::\n\n\n\n-   Run a ordinal logistic regression model against all relevant input variables. Interpret the effects for `Gender`, `Age` and `Gender*Age` (even if they are non-significant).\n\n\n\n    ::: {.cell}\n    \n    ```{.r .cell-code}\n    model_int <- clm(`Technical Rank` ~ Gender * Age, data = gb)\n    \n    tidy(model_int) %>% kable(digits = 3)\n    ```\n    \n    ::: {.cell-output-display}\n    \n    \n    |term        | estimate| std.error| statistic| p.value|coef.type |\n    |:-----------|--------:|---------:|---------:|-------:|:---------|\n    |1&#124;2    |   -0.267|     0.499|    -0.535|   0.593|intercept |\n    |2&#124;3    |    1.154|     0.504|     2.291|   0.022|intercept |\n    |GenderF     |    1.149|     0.673|     1.708|   0.088|location  |\n    |Age         |    0.016|     0.014|     1.147|   0.252|location  |\n    |GenderF:Age |   -0.039|     0.019|    -2.093|   0.036|location  |\n    \n    \n    :::\n    :::\n\n\n**interpretation:** \n\n**gender: The coefficient for GenderF is 1.149 (p = 0.088). This means that, holding Age constant, females have a 1.149 unit higher latent score compared to males. Although this effect is only marginally significant (p = 0.088), it suggests that being female may be associated with a shift toward a higher rank category.**\n\n**age: The coefficient for Age is -0.013 (p = 0.000). This means that for each additional year of age, there is a 0.016 unit increase in the latent score. However, this effect is not statistically significant (p = 0.252), so we do not have strong evidence that Age alone affects technical rank.**\n\n**genderxage: The interaction has an estimate of -0.039 (p = 0.036), which is statistically significant. This indicates that the effect of Age on technical rank differs by gender. Specifically, for females, the impact of Age is 0.039 units lower than for males.**\n\n-   Test if the interaction is warranted\n\n#Hint: You need to create two models with clm(); one with interaction and one without.\n#Then you compare them using the anova test using anova()\n\n\n\n    ::: {.cell}\n    \n    ```{.r .cell-code}\n    model_int <- clm(`Technical Rank` ~ Gender * Age, data = gb)\n    model_no_int <- clm(`Technical Rank` ~ Gender + Age, data = gb)\n    anova(model_no_int, model_int)\n    ```\n    \n    ::: {.cell-output .cell-output-stdout}\n    \n    ```\n    Likelihood ratio tests of cumulative link models:\n     \n                 formula:                        link: threshold:\n    model_no_int `Technical Rank` ~ Gender + Age logit flexible  \n    model_int    `Technical Rank` ~ Gender * Age logit flexible  \n    \n                 no.par    AIC  logLik LR.stat df Pr(>Chisq)  \n    model_no_int      4 685.72 -338.86                        \n    model_int         5 683.28 -336.64   4.437  1    0.03517 *\n    ---\n    Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n    ```\n    \n    \n    :::\n    :::\n\n\n**interpretation: Including the Gender*Age interaction significantly improves the model (p < .05), meaning that the effect of Age on the technical rank is different for different genders. In other words, the relationship between Age and technical rank depends on whether the baker is male or female.**\n\n-   Use `ggemmeans` to create a figure showing the interaction between `Gender` and `Age` as a function of rank. Plot predicted probabilities from the model.\n\n\n\n    ::: {.cell}\n    \n    ```{.r .cell-code}\n    gb <- gb %>% rename(Technical_Rank = `Technical Rank`)\n    model_int <- clm(Technical_Rank ~ Gender * Age, data = gb)\n    preds <- ggemmeans(model_int, terms = c(\"Age [all]\", \"Gender\"), regrid = FALSE)\n    plot(preds) +\n      labs(title = \"Predicted Probabilities for Technical_Rank by Age and Gender\",\n       x = \"Age\",\n       y = \"Predicted Probability\")\n    ```\n    \n    ::: {.cell-output-display}\n    ![](ord_lab_q_files/figure-html/unnamed-chunk-10-1.png){width=672}\n    :::\n    :::\n\n\n\n### Latent Visualization\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nols_clm <- MASS::polr(Technical_Rank ~ Gender * Age, data = gb)\n\nggeffect(ols_clm, terms = c(\"Age[all]\", \"Gender\"), latent = TRUE) %>% \n  plot() +\n  labs(title = \"Effect of Age and Gender on Technical_Rank\",\n       x = \"Age\",\n       y = \"Latent Variable\")\n```\n\n::: {.cell-output-display}\n![](ord_lab_q_files/figure-html/unnamed-chunk-11-1.png){width=672}\n:::\n:::\n\n\n\n-   Use the Brant test to support or reject the hypothesis that the proportional odds assumption holds for your simplified model.\n\n\n\n    ::: {.cell}\n    \n    ```{.r .cell-code}\n    brant.test(ols_clm)\n    ```\n    \n    ::: {.cell-output .cell-output-stdout}\n    \n    ```\n    \n    Brant Test:\n                   chi-sq   df   pr(>chi)\n    Omnibus         1.295    3       0.73\n    GenderF         0.585    1       0.44\n    Age             1.052    1       0.31\n    GenderF:Age     0.924    1       0.34\n    \n    H0: Proportional odds assumption holds\n    ```\n    \n    \n    :::\n    :::\n\n\n**The omnibus chi-square statistic is 1.295 with 3 degrees of freedom and a p-value of 0.73. Since this p-value is not significant, we do not reject the null hypothesis. This indicates that overall the proportional odds assumption holds for the model. None of the tests (including all the individual tests) are statistically significant, we conclude that there is no evidence to reject the null hypothesis. Thus, the proportional odds assumption holds for the simplified model.**\n\n\n    ## `brms`\n\n-   Below is a model implementation using the `brms` package. We will just use the default priors for this. \nThe exercise is to run this code and note your observations. \nWhat are salient differences you observe in how the model fitting takes place\nWith respect to the results, how do you compare the results of the model you fit with `clm` and the one you fit with `brms`?\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n  ols2_brm <- brm(Technical_Rank ~ Gender * Age, \n                  data = gb, \n                  family = cumulative, \n                  cores = 4, \n                  chains = 4, \n                  seed = 123)\n```\n:::\n\n\n**While both clm and brms provide very similar point estimates and conclusions regarding the effects of Gender, Age, and their interaction on Technical_Rank, the Bayesian approach (brms) offers richer information regarding uncertainty (CI) and additional convergence diagnostics.**\n\n-  The `conditional_effects` function is used to plot predicted probabilities by Gender and Age across each rank. \n\n\n\n    ::: {.cell}\n    \n    ```{.r .cell-code}\n    conditional_effects(ols2_brm, categorical = T)\n    ```\n    \n    ::: {.cell-output-display}\n    ![](ord_lab_q_files/figure-html/unnamed-chunk-14-1.png){width=672}\n    :::\n    \n    ::: {.cell-output-display}\n    ![](ord_lab_q_files/figure-html/unnamed-chunk-14-2.png){width=672}\n    :::\n    :::\n\n\n\n- `check_predictions` from the `easystats` `performance` package is used for examining model fit (i.e., does the data fit the model being used?). \nRun the below code. What do you think?\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncheck_predictions(ols2_brm)\n```\n\n::: {.cell-output-display}\n![](ord_lab_q_files/figure-html/unnamed-chunk-15-1.png){width=672}\n:::\n:::\n\n\n**This function shows how well the Bayesian model’s predictions align with the data. The green dots represent the actual counts (or frequencies) for each category of Technical_Rank in the dataset. The blue dots and error bars represent the mean (or median) model-predicted counts, while the error bars reflect the uncertainty (95% CI) around the predictions. The model predictions align fairly well with the actual data.**\n\n\n",
    "supporting": [
      "ord_lab_q_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}